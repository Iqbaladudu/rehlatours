'use server'

import { getPayload } from 'payload'
import config from '@/payload.config'
// import { validateUmrahForm } from '@/lib/validations'
import { validateUmrahFormSimple } from '@/lib/validations-simple'

interface SubmitResponse {
  success: boolean
  data?: {
    id: string
    booking_id: string
    message: string
  }
  error?: string
  errors?: string[]
}

export async function submitUmrahForm(formData: any): Promise<SubmitResponse> {
  console.log('=== SUBMIT FORM START ===')

  try {
    console.log('Step 1: Starting form submission')
    console.log('Form data type:', typeof formData)
    console.log('Form data keys:', formData ? Object.keys(formData) : 'null/undefined')

    // Detect potential circular references
    try {
      JSON.stringify(formData)
      console.log('Form data is JSON serializable (no circular refs detected)')
    } catch (jsonError) {
      console.log('DETECTED: Form data has circular references!')
      console.log('JSON error:', jsonError)
    }

    // Check if formData is valid
    if (!formData) {
      console.log('ERROR: Form data is null or undefined')
      return {
        success: false,
        error: 'Form data is missing',
      }
    }

    console.log('Step 2: Form data validation passed')

    // Skip validation temporarily to isolate the issue
    console.log('Step 3: TESTING simple validation...')

    // Test with simple validation first
    const simpleValidationResult = validateUmrahFormSimple(formData)
    console.log('Simple validation result:', simpleValidationResult)

    if (!simpleValidationResult.success) {
      console.log('Simple validation failed:', simpleValidationResult.error)
      return {
        success: false,
        error: `Simple validation failed: ${simpleValidationResult.error}`,
        errors: simpleValidationResult.errors,
      }
    }

    console.log('Step 4: Simple validation passed, preparing data...')

    console.log('Step 4: Creating completely clean data object to avoid circular references...')

    // Function to safely extract primitive values and avoid circular references
    const safeExtract = (value: any): any => {
      if (value === null || value === undefined) return null
      if (typeof value === 'string') return value.toString()
      if (typeof value === 'number') return Number(value)
      if (typeof value === 'boolean') return Boolean(value)
      if (value instanceof Date) return new Date(value.getTime())
      if (typeof value === 'object' && value.toString) return value.toString()
      return String(value)
    }

    // Prepare completely clean data to prevent deepmerge circular reference issues
    const cleanData = {
      booking_id: '', // Will be auto-generated by PayloadCMS
      name: safeExtract(formData.name) || '',
      register_date: formData.register_date
        ? new Date(formData.register_date).toISOString()
        : new Date().toISOString(),
      gender: safeExtract(formData.gender) || 'male',
      place_of_birth: safeExtract(formData.place_of_birth) || '',
      birth_date: formData.birth_date
        ? new Date(formData.birth_date).toISOString()
        : new Date().toISOString(),
      father_name: safeExtract(formData.father_name) || '',
      mother_name: safeExtract(formData.mother_name) || '',
      address: safeExtract(formData.address) || '',
      city: safeExtract(formData.city) || '',
      province: safeExtract(formData.province) || '',
      postal_code: safeExtract(formData.postal_code) || '',
      occupation: safeExtract(formData.occupation) || '',
      specific_disease: Boolean(formData.specific_disease) || false,
      illness: safeExtract(formData.illness) || null,
      special_needs: Boolean(formData.special_needs) || false,
      wheelchair: Boolean(formData.wheelchair) || false,
      nik_number: safeExtract(formData.nik_number) || '',
      passport_number: safeExtract(formData.passport_number) || '',
      date_of_issue: formData.date_of_issue
        ? new Date(formData.date_of_issue).toISOString()
        : new Date().toISOString(),
      expiry_date: formData.expiry_date
        ? new Date(formData.expiry_date).toISOString()
        : new Date().toISOString(),
      place_of_issue: safeExtract(formData.place_of_issue) || '',
      phone_number: safeExtract(formData.phone_number) || '',
      whatsapp_number: safeExtract(formData.whatsapp_number) || '',
      email: safeExtract(formData.email) || '',
      has_performed_umrah: Boolean(formData.has_performed_umrah) || false,
      has_performed_hajj: Boolean(formData.has_performed_hajj) || false,
      emergency_contact_name: safeExtract(formData.emergency_contact_name) || '',
      relationship: safeExtract(formData.relationship) || 'parents',
      emergency_contact_phone: safeExtract(formData.emergency_contact_phone) || '',
      mariage_status: safeExtract(formData.mariage_status) || 'single',
      umrah_package: safeExtract(formData.umrah_package) || '',
      payment_method: safeExtract(formData.payment_method) || 'lunas',
      terms_of_service: Boolean(formData.terms_of_service) || false,
      submission_date: new Date().toISOString(),
      status: 'pending_review',
    }

    console.log('Step 6: Clean data object created successfully')
    console.log('Clean data keys:', Object.keys(cleanData))

    console.log('Step 7: Initializing Payload...')

    // Initialize Payload
    const payload = await getPayload({ config })

    console.log('Step 8: Payload initialized successfully')

    console.log('Step 9: Creating submission in database...')

    // Submit to database using minimal schema
    const result = await payload.create({
      collection: 'umrah-form-minimal',
      data: cleanData,
    })

    console.log('Step 10: Database submission successful')
    console.log('Result ID:', result.id)
    console.log('Result booking_id:', (result as any).booking_id)

    console.log('=== SUBMIT FORM SUCCESS ===')

    return {
      success: true,
      data: {
        id: result.id,
        booking_id: (result as any).booking_id,
        message: `Pendaftaran berhasil! ID Booking Anda: ${(result as any).booking_id}. Kami akan menghubungi Anda segera.`,
      },
    }
  } catch (error) {
    console.log('=== SUBMIT FORM ERROR ===')
    console.error('Error type:', typeof error)
    console.error('Error constructor:', error?.constructor?.name)
    console.error('Error message:', error instanceof Error ? error.message : 'Unknown error')
    console.error('Full error object:', error)

    // Log stack trace if available
    if (error instanceof Error && error.stack) {
      console.error('Error stack trace:')
      console.error(error.stack)
    }

    const errorMessage = error instanceof Error ? error.message : 'Unknown error'

    // Check for stack overflow specifically
    if (errorMessage.includes('Maximum call stack') || errorMessage.includes('stack overflow')) {
      console.log('DETECTED: Stack overflow error!')
      return {
        success: false,
        error: 'Terjadi error sistem (stack overflow). Silakan refresh halaman dan coba lagi.',
      }
    }

    // Generic error
    return {
      success: false,
      error: 'Terjadi kesalahan sistem. Silakan coba lagi atau hubungi customer service.',
    }
  }
}

async function validateBusinessRules(data: any) {
  // Temporarily disabled to isolate stack overflow
  return { isValid: true }
}

function prepareDataForSubmission(data: any) {
  // Simplified version
  return data
}

async function checkDuplicateSubmission(payload: any, data: any) {
  // Temporarily disabled to isolate stack overflow
  return null
}

async function sendConfirmationNotifications(result: any) {
  // Temporarily disabled to isolate stack overflow
  console.log('Notifications skipped for debugging')
}

function calculateAge(birthDate: Date): number {
  const today = new Date()
  const age = today.getFullYear() - birthDate.getFullYear()
  const monthDiff = today.getMonth() - birthDate.getMonth()

  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
    return age - 1
  }
  return age
}

function getMonthsDifference(startDate: Date, endDate: Date): number {
  const yearDiff = endDate.getFullYear() - startDate.getFullYear()
  const monthDiff = endDate.getMonth() - startDate.getMonth()
  return yearDiff * 12 + monthDiff
}

export async function getUmrahPackageOptions() {
  try {
    const payload = await getPayload({ config })

    const packages = await payload.find({
      collection: 'umrah-package',
      sort: 'name',
      select: {
        id: true,
        name: true,
        price: true,
        duration: true,
      },
      limit: 100,
    })

    const options = packages.docs.map((pkg) => ({
      id: pkg.id,
      name: pkg.name,
      price: pkg.price,
      duration: pkg.duration,
    }))

    return { success: true, data: options }
  } catch (error) {
    console.error('Error fetching package options:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Terjadi kesalahan saat mengambil opsi paket',
      data: [],
    }
  }
}
